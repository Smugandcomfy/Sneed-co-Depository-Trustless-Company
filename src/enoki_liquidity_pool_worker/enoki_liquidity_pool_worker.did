type AssignedShards = record {
    token_a : principal;
    token_b : principal
};

type LiquidityAmount = record {
    token_a : vec nat8;
    token_b : vec nat8
};

type LiquidityAmountNat = record {
    token_a : nat;
    token_b : nat
};

type ShardedTransferNotification = record {
    to : principal;
    value : nat;
    data : text;
    from : principal;
    fee_charged : nat;
    from_shard : principal;
};

type TokenInfo = record {
    "principal" : principal
};

type TokenPairInfo = record {
    token_a : TokenInfo;
    token_b : TokenInfo;
    price_number_of_decimals : nat64;
};
service : (principal, principal) -> {
    addBroker : (principal) -> ();
    addLiquidity : (ShardedTransferNotification) -> ();
    getAssignedShardA : () -> (principal) query;
    getAssignedShardB : () -> (principal) query;
    getAssignedShards : () -> (AssignedShards) query;
    getLiquidity : (principal) -> (LiquidityAmountNat) query;
    getManager : () -> (principal) query;
    getOwner : () -> (principal) query;
    getShardsToAddLiquidity : () -> (AssignedShards) query;
    getTokenInfo : () -> (TokenPairInfo) query;
    initWorker : (TokenPairInfo) -> (AssignedShards);
    removeAllLiquidity : () -> ();
    removeLiquidity : (LiquidityAmount) -> ();
    setManager : (principal) -> ();
    setOwner : (principal) -> ();
    triggerHeartbeat : () -> (opt nat64);
}