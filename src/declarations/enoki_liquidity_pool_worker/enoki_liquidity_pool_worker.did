type AssignedShards = record { token_a : principal; token_b : principal };
type LiquidityAmountNat = record { token_a : nat; token_b : nat };
type LiquidityTradesNat = record {
  decreased : LiquidityAmountNat;
  increased : LiquidityAmountNat;
};
type ShardedTransferNotification = record {
  to : principal;
  value : nat;
  data : text;
  from : principal;
  fee_charged : nat;
  from_shard : principal;
};
type TokenInfo = record { "principal" : principal };
type TokenPairInfo = record {
  token_a : TokenInfo;
  token_b : TokenInfo;
  price_number_of_decimals : nat64;
};
service : () -> {
  addBroker : (principal) -> ();
  addLiquidity : (ShardedTransferNotification) -> (text);
  finishInit : (principal) -> ();
  getAssignedShardA : () -> (principal) query;
  getAssignedShardB : () -> (principal) query;
  getAssignedShards : () -> (AssignedShards) query;
  getLiquidity : (principal) -> (LiquidityAmountNat) query;
  getManager : () -> (principal) query;
  getNetDeposits : (principal) -> (LiquidityTradesNat) query;
  getOwner : () -> (principal) query;
  getShardsToAddLiquidity : () -> (AssignedShards) query;
  getTokenInfo : () -> (TokenPairInfo) query;
  initWorker : (TokenPairInfo) -> (AssignedShards);
  isUserRegistered : (principal) -> (bool) query;
  register : (principal) -> ();
  removeAllLiquidity : () -> ();
  removeLiquidity : (LiquidityAmountNat) -> ();
  setManager : (principal) -> ();
  setOwner : (principal) -> ();
  triggerHeartbeat : () -> (opt nat64);
}